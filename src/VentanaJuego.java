
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Kevin Avenda√±o
 */
public class VentanaJuego extends java.awt.Frame {

    /**
     * Creates new form Prueba
     */
    ArrayList<Cuadrado> cuadrados;
    ArrayList<Cuadrado> cuadrados2;
    Cuadrado jugador1=new Cuadrado(320, 320, 100, 100);;
    Cuadrado jugador2;
    Socket pingSocket;
    static char c;
    PrintWriter out;
    BufferedReader in;
    Thread thread;
    Paintor paintor;
    

    public VentanaJuego(Socket pingSocket, PrintWriter out, BufferedReader in) throws IOException {
        initComponents();
        this.pingSocket = pingSocket;
        this.out = out;
        this.in = in;
        this.addKeyListener(new myKeyListener());
        this.setFocusable(true);
        this.setFocusTraversalKeysEnabled(false);
        while (!in.ready()){}
        String br = null;
        while(!(br = in.readLine()).equals("END STATE")){
            deSerializePiece(br);
        }
        
        paintor = new Paintor(this);
        thread = new Thread(paintor);
        thread.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        setMaximumSize(new java.awt.Dimension(640, 640));
        setMinimumSize(new java.awt.Dimension(640, 640));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                exitForm(evt);
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
     * @param args the command line arguments
     */

    public void deSerializePiece(String piece)
    {   
        if(piece.equals("")){}
        
        else if(piece.startsWith("J"))
        {
            Cuadrado player;
            if (piece.startsWith("J1"))
            {
                if (jugador1 == null)
                    jugador1 = new Cuadrado();
                player = jugador1;
            } else
            {
                if (jugador2 == null)
                    jugador2 = new Cuadrado();
                player = jugador2;
            }

            piece = piece.substring(piece.indexOf("[") + 1);
            piece = piece.substring(0, piece.indexOf("]"));
            String values[] = piece.split(",");

            player.x0 = Integer.parseInt(values[0]);
            player.y0 = Integer.parseInt(values[1]);
            player.width = Integer.parseInt(values[2]);
            player.height = Integer.parseInt(values[3]);
            
        }
        else
        {
            ArrayList<Cuadrado> list;
            if (piece.startsWith("BT"))
            {
                if (cuadrados2 == null)
                    cuadrados2 = new ArrayList<>();
                list = cuadrados2;
            } else
            {
                if (cuadrados == null)
                    cuadrados = new ArrayList<>();
                list = cuadrados;
            }
            
            int index = Integer.parseInt(piece.substring(2,piece.indexOf("[")).trim());
            
            piece = piece.substring(piece.indexOf("[") + 1);
            piece = piece.substring(0, piece.indexOf("]"));
            String values[] = piece.split(",");
            
            Cuadrado cuadrado = new Cuadrado(
                Integer.parseInt(values[0]), //x0
                Integer.parseInt(values[1]), //y0
                Integer.parseInt(values[2]), //width
                Integer.parseInt(values[3])  //height
            );
            if(index < list.size())
            {
                list.set(index, cuadrado);
            }
            else if(index == list.size())
            {
                list.add(cuadrado);
            }
            else
            {
                //wtf?
                throw new IndexOutOfBoundsException();
            }
        }
    }
    
    @Override
    public void paint(Graphics g) {
            
            g.drawRect(jugador1.x0, jugador1.y0, jugador1.width, jugador1.height);
            //PARA ARRIBA
            for (int i = 0; i < cuadrados.size(); i++) {
                g.setColor(Color.white);
                g.drawRect(cuadrados.get(i).x0, cuadrados.get(i).y0, cuadrados.get(i).width, cuadrados.get(i).height);
            }

            //PARA ABAJO
            for (int i = 0; i < cuadrados2.size(); i++) {
                g.setColor(Color.white);
                g.drawRect(cuadrados2.get(i).x0, cuadrados2.get(i).y0, cuadrados2.get(i).width, cuadrados2.get(i).height);
            }

            out.write("ESPERANDO RESPUESTA "+c+"\r\n");
            if (c =='1')
                c = '0';
            try {
                while (!in.ready()){}
            } catch (IOException ex) {
                Logger.getLogger(VentanaJuego.class.getName()).log(Level.SEVERE, null, ex);
            }
            String br = null;
            try {
                while(!(br = in.readLine()).equals("END STATE")){
                    deSerializePiece(br);
                }
            } catch (IOException ex) {
                Logger.getLogger(VentanaJuego.class.getName()).log(Level.SEVERE, null, ex);
            }
                
            for (int i = 0; i < cuadrados.size(); i++) {
                g.setColor(Color.red);
                g.drawRect(cuadrados.get(i).x0, cuadrados.get(i).y0, cuadrados.get(i).width, cuadrados.get(i).height);
            }
            
            for (int i = 0; i < cuadrados2.size(); i++) {
                g.setColor(Color.red);
                g.drawRect(cuadrados2.get(i).x0, cuadrados2.get(i).y0, cuadrados2.get(i).width, cuadrados2.get(i).height);
                /*if(cuadrados2.get(i).x0 <= jugador1.x0 && (cuadrados2.get(i).x0 + cuadrados2.get(i).width) >= jugador1.x0){
                    cuadroActual = i;
                }*/
            }
            
            //AQUI SE LLAMA LA GRAVEDAD
            
            /*PlayerManage playerm1 = new PlayerManage(jugador1,cuadrados2,cuadroActual,g);
            Thread infThread = new Thread(playerm1);
            infThread.start();*/
            
            
            try {
                Thread.sleep(50);
            } catch (InterruptedException ex) {
                Logger.getLogger(VentanaJuego.class.getName()).log(Level.SEVERE, null, ex);
            }
     } 

    private static class myKeyListener implements KeyListener {

        public myKeyListener()
        {
        }

        @Override
        public void keyTyped(KeyEvent e)
        {
            //System.out.println("keyTyped");
        }

        @Override
        public void keyPressed(KeyEvent e)
        {
            
            if (e.getKeyChar() == ' '){
                System.out.println("keyRelegdfg");
                c = '1';
            }
            else{
                c = '0';
            }
        }

        @Override
        public void keyReleased(KeyEvent e)
        {
            //System.out.println("keyReleased");
        }
    }

    private class Paintor implements Runnable {

        VentanaJuego juego;
        
        public Paintor(VentanaJuego juego)
        {
            this.juego = juego;
        }

        @Override
        public void run()
        {
            while(true)
            {
                juego.repaint();
            }
        }
    }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
