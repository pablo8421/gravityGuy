
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Kevin Avenda√±o
 */
public class VentanaJuego extends java.awt.Frame {

    /**
     * Creates new form Prueba
     */
    
    GameState gState[];
    int current;
    
    public final static String CRLF = "\r\n";
    
    Socket pingSocket;
    boolean gDown;
    PrintWriter out;
    BufferedReader in;
    Thread thread;
    Paintor paintor;
    

    public VentanaJuego(Socket pingSocket, PrintWriter out, BufferedReader in) throws IOException {
        initComponents();
        this.pingSocket = pingSocket;
        this.out = out;
        this.in = in;
        this.addKeyListener(new myKeyListener());
        this.setFocusable(true);
        this.setFocusTraversalKeysEnabled(false);
        while (!in.ready()){}
        String br = null;
        
        current = 0;
        gState = new GameState[2];
        for(int i = 0; i < gState.length; i++)
        {
            gState[i] = new GameState();
        }
        
        while(!(br = in.readLine()).equals("END STATE")){
            gState[0].deSerializePiece(br);
        }
                
        paintor = new Paintor(this);
        thread = new Thread(paintor);
        thread.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        setMaximumSize(new java.awt.Dimension(640, 640));
        setMinimumSize(new java.awt.Dimension(640, 640));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                exitForm(evt);
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
     * @param args the command line arguments
     */
    
    @Override
    public void paint(Graphics g) {
            int previous = current;
            if(current == 0)
            {
                current = 1;
                
            }
            else
            {
                current = 0; 
            }

            GameState now = gState[current];

            //GET STATE
            
            out.write("ESPERANDO RESPUESTA " + CRLF);
            try {
                while (!in.ready()){}
            } catch (IOException ex) {
                Logger.getLogger(VentanaJuego.class.getName()).log(Level.SEVERE, null, ex);
            }
            String br = null;
            try {
                while(!(br = in.readLine()).equals("END STATE")){
                    now.deSerializePiece(br);
                }
            } catch (IOException ex) {
                Logger.getLogger(VentanaJuego.class.getName()).log(Level.SEVERE, null, ex);
            }

            //Erase state
            
            now = gState[previous];
            g.setColor(Color.white);
            g.drawRect(now.jugador1.x0, now.jugador1.y0, now.jugador1.width, now.jugador1.height);
            //PARA ARRIBA
            for (int i = 0; i < now.cuadradosTop.size(); i++) {
                g.drawRect(now.cuadradosTop.get(i).x0, now.cuadradosTop.get(i).y0, now.cuadradosTop.get(i).width, now.cuadradosTop.get(i).height);
            }

            //PARA ABAJO
            for (int i = 0; i < now.cuadradosBottom.size(); i++) {
                g.drawRect(now.cuadradosBottom.get(i).x0, now.cuadradosBottom.get(i).y0, now.cuadradosBottom.get(i).width, now.cuadradosBottom.get(i).height);
            }
            
            //Paint State
            
            now = gState[current];
            g.setColor(Color.black);
            g.drawRect(now.jugador1.x0, now.jugador1.y0, now.jugador1.width, now.jugador1.height);
            g.setColor(Color.red);
            for (int i = 0; i < now.cuadradosTop.size(); i++) {
                g.drawRect(now.cuadradosTop.get(i).x0, now.cuadradosTop.get(i).y0, now.cuadradosTop.get(i).width, now.cuadradosTop.get(i).height);
            }
            
            for (int i = 0; i < now.cuadradosBottom.size(); i++) {
                g.drawRect(now.cuadradosBottom.get(i).x0, now.cuadradosBottom.get(i).y0, now.cuadradosBottom.get(i).width, now.cuadradosBottom.get(i).height);
                /*if(cuadrados2.get(i).x0 <= jugador1.x0 && (cuadrados2.get(i).x0 + cuadrados2.get(i).width) >= jugador1.x0){
                    cuadroActual = i;
                }*/
            }
            
            //AQUI SE LLAMA LA GRAVEDAD
            
            /*PlayerManage playerm1 = new PlayerManage(jugador1,cuadrados2,cuadroActual,g);
            Thread infThread = new Thread(playerm1);
            infThread.start();*/
            
            
            try {
                Thread.sleep(50);
            } catch (InterruptedException ex) {
                Logger.getLogger(VentanaJuego.class.getName()).log(Level.SEVERE, null, ex);
            }
     } 

    private class myKeyListener implements KeyListener {

        public myKeyListener()
        {
        }

        @Override
        public void keyTyped(KeyEvent e)
        {
            //System.out.println("keyTyped");
        }

        @Override
        public void keyPressed(KeyEvent e)
        {
            
            if (e.getKeyChar() == ' '){

                gDown = !gDown;
                out.write("GC " + gDown);
                System.out.println("Send: GC " + gDown);                
            }
        }

        @Override
        public void keyReleased(KeyEvent e)
        {
            //System.out.println("keyReleased");
        }
    }

    private class Paintor implements Runnable {

        VentanaJuego juego;
        
        public Paintor(VentanaJuego juego)
        {
            this.juego = juego;
        }

        @Override
        public void run()
        {
            while(true)
            {
                try
                {
                    while(!juego.in.ready()){}
                } catch (IOException ex)
                {
                    Logger.getLogger(VentanaJuego.class.getName()).log(Level.SEVERE, null, ex);
                }
                juego.paint(juego.getGraphics());
            }
        }
    }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
